@startuml
class component.spell.LightningOrb {
- {static} double BASE_DAMAGE
- {static} double BASE_CAST_TIME
- {static} double ZAP_RANGE
- {static} double IMAGE_SCALE
- {static} String imageUrl
+ <<Create>> LightningOrb(Vector2D,Races)
+ <<Create>> LightningOrb(Vector2D,Empower,Races)
+ void upgrade(Empower)
+ void cast()
+ void applyEffect()
}


class component.protoss.Zealot {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
+ <<Create>> Zealot(Vector2D)
}


abstract class component.spell.BaseSpell {
+ <<Create>> BaseSpell(String,String,Vector2D,double,double,Races)
+ void cast()
+ void applyEffect()
}

class component.terran.Sniper {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ <<Create>> Sniper(Vector2D)
}


class component.zerg.BaseZergEnemy {
+ <<Create>> BaseZergEnemy(String,String,Vector2D,double,double,double,double,double,double,double,Races)
}

class component.zerg.Baneling {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ <<Create>> Baneling(Vector2D)
+ void applyEffect()
}


class component.spell.Fireball {
- {static} double BASE_DAMAGE
- {static} double BASE_CAST_TIME
- {static} double BASE_RADIUS
- {static} double IMAGE_SCALE
- {static} String imageUrl
+ <<Create>> Fireball(Vector2D,Races)
+ <<Create>> Fireball(Vector2D,Empower,Races)
+ void upgrade(Empower)
+ void cast()
+ void applyEffect()
}


interface component.spell.Upgradable {
~ void upgrade(Empower)
}

interface component.spell.Empower {
}
class component.zerg.Mutalisk {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ <<Create>> Mutalisk(Vector2D)
+ void applyEffect()
}


class component.protoss.Archons {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
+ <<Create>> Archons(Vector2D)
}


class component.zerg.Zergling {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ <<Create>> Zergling(Vector2D)
}


class component.terran.Thor {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ <<Create>> Thor(Vector2D)
}


class component.terran.BaseTerranEnemy {
+ <<Create>> BaseTerranEnemy(String,String,Vector2D,double,double,double,double,double,double,double,Races)
}

class component.Player {
+ {static} String imageUrl
+ {static} double BASE_MAX_HEALTH
+ {static} double BASE_SPEED
+ {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_DAMAGE
+ <<Create>> Player(Vector2D)
}


class component.Base {
- String name
- Image image
- ImageView imageView
- Vector2D position
- double speed
- Vector2D direction
- Vector2D cameraMovementVector
- Group renderGroup
- Circle redDot
- double imageScale
- Races races
- boolean isDestroyed
+ <<Create>> Base(String,String,Vector2D,double,double,Races)
+ void updateSprite()
+ void step(double)
+ void selfDelete()
+ String getName()
+ void setName(String)
+ Vector2D getPosition()
+ void setPosition(Vector2D)
+ Image getImage()
+ void setImage(String)
+ ImageView getImageView()
+ Vector2D getDirection()
+ void setDirection(Vector2D)
+ Vector2D getCameraMovementVector()
+ void setCameraMovementVector(Vector2D)
+ double getSpeed()
+ void setSpeed(double)
+ Group getRenderGroup()
+ void setRenderGroup(Group)
+ double getImageScale()
+ void setImageScale(double)
+ Races getRaces()
+ void setRaces(Races)
+ boolean isDestroyed()
+ void setDestroyed(boolean)
}


class component.spell.Tornado {
- {static} double BASE_DAMAGE
- {static} double BASE_CAST_TIME
- {static} double BASE_RADIUS
- {static} double BASE_PULL_FORCE
- {static} double IMAGE_SCALE
- {static} double BASE_SPELL_TIME
- {static} String imageUrl
+ <<Create>> Tornado(Vector2D,Races)
+ <<Create>> Tornado(Vector2D,Empower,Races)
+ void upgrade(Empower)
+ void cast()
+ void applyEffect()
- void selfDestroy()
}


class component.terran.Medic {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double BASE_HEAL
- {static} double BASE_HEAL_RANGE
- {static} double IMAGE_SCALE
+ <<Create>> Medic(Vector2D)
+ void applyEffect()
}


enum component.Races {
+  TERRAN
+  ZERG
+  PROTOSS
+  ALL
}

class component.terran.Solider {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ <<Create>> Solider(Vector2D)
}


class component.protoss.Disruptor {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
- {static} double BASE_AURA_RANGE
- {static} double BASE_SLOW
+ <<Create>> Disruptor(Vector2D)
+ void applyEffect()
}


class component.protoss.Tempest {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
- double life
+ <<Create>> Tempest(Vector2D)
+ <<Create>> Tempest(Vector2D,double)
+ void applyEffect()
+ double getLife()
+ void setLife(double)
}


class component.Crystal {
- {static} String name
- {static} String imageUrl
- {static} Vector2D position
- {static} double maxHealth
- {static} double IMAGE_SCALE
+ <<Create>> Crystal()
}


class component.BaseUnit {
- double maxHealth
- double health
- Rectangle healthBar
- double maxAttackRange
- double minAttackRange
- double damage
- double attackFrequency
- boolean attackFlag
- BaseUnit target
- Thread attackThread
- Image invisibleImage
- ImageView invisibleImageView
- Group invisibleRenderGroup
+ <<Create>> BaseUnit(String,String,Vector2D,double,double,double,double,double,double,double,Races)
+ double getMaxHealth()
+ void setMaxHealth(double)
+ double getHealth()
+ void setHealth(double)
+ boolean isDestroyed()
+ double getMaxAttackRange()
+ void setMaxAttackRange(double)
+ double getMinAttackRange()
+ void setMinAttackRange(double)
+ double getDamage()
+ void setDamage(double)
+ double getAttackFrequency()
+ void setAttackFrequency(double)
+ BaseUnit getTarget()
+ void setTarget(BaseUnit)
+ void updateSprite()
+ void step(double)
- void constructAttackThread()
+ Group getInvisibleRenderGroup()
}


enum component.spell.Spell {
+  FIREBALL
+  LIGHTING_ORB
+  TORNADO
}

class component.protoss.BaseProtossEnemy {
- double shield
- double maxShield
+ <<Create>> BaseProtossEnemy(String,String,Vector2D,double,double,double,double,double,double,double,Races,double)
+ void applyEffect()
+ double getMaxShield()
+ void setMaxShield(double)
+ double getShield()
+ void setShield(double)
+ void setHealth(double)
}


class component.zerg.Infestor {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double ATTACK_BUFF
- {static} double SPEED_BUFF
- {static} double SPEED_DEBUFF
+ <<Create>> Infestor(Vector2D)
+ void applyEffect()
}




component.spell.Upgradable <|.. component.spell.LightningOrb
component.spell.BaseSpell <|-- component.spell.LightningOrb
component.protoss.BaseProtossEnemy <|-- component.protoss.Zealot
component.Base <|-- component.spell.BaseSpell
component.terran.BaseTerranEnemy <|-- component.terran.Sniper
component.BaseUnit <|-- component.zerg.BaseZergEnemy
component.zerg.BaseZergEnemy <|-- component.zerg.Baneling
component.spell.Upgradable <|.. component.spell.Fireball
component.spell.BaseSpell <|-- component.spell.Fireball
component.zerg.BaseZergEnemy <|-- component.zerg.Mutalisk
component.protoss.BaseProtossEnemy <|-- component.protoss.Archons
component.zerg.BaseZergEnemy <|-- component.zerg.Zergling
component.terran.BaseTerranEnemy <|-- component.terran.Thor
component.BaseUnit <|-- component.terran.BaseTerranEnemy
component.BaseUnit <|-- component.Player
component.spell.Upgradable <|.. component.spell.Tornado
component.spell.BaseSpell <|-- component.spell.Tornado
component.terran.BaseTerranEnemy <|-- component.terran.Medic
component.terran.BaseTerranEnemy <|-- component.terran.Solider
component.protoss.BaseProtossEnemy <|-- component.protoss.Disruptor
component.protoss.BaseProtossEnemy <|-- component.protoss.Tempest
component.BaseUnit <|-- component.Crystal
component.Base <|-- component.BaseUnit
component.BaseUnit <|-- component.protoss.BaseProtossEnemy
component.zerg.BaseZergEnemy <|-- component.zerg.Infestor
@enduml