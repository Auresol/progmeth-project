@startuml
class graphic.GameRender {
- {static} GameControl gameControl
- HashMap<Races,ArrayList<Base>> entities
- {static} GameRender instance
- {static} double cameraTurnSpeed
- {static} double cameraAngle
- {static} double cameraTargetAngle
- Queue<Runnable> animationTasks
- Player player
- Crystal crystal
- {static} Races currentRace
+ {static} GameRender getInstance()
+ void start()
- void clear()
- void update()
- void updateEntity(Base,double)
+ {static} double getCameraTargetAngle()
+ {static} void setCameraTargetAngle(double)
+ {static} Races getCurrentRace()
+ {static} void setCurrentRace(Races)
+ void shakeCamera(int,long,double,double)
+ {static} void goToNextRaces()
+ {static} void goToPreviousRaces()
}


class graphic.MainRender {
- {static} MainRender instance
- {static} ImageView createTextLabelFromImage(String,double)
- {static} ImageView createButtonFromImageAtCenter(String,String,double)
+ {static} MainRender getInstance()
}


class component.spell.LightningOrb {
- {static} double BASE_DAMAGE
- {static} double BASE_CAST_TIME
- {static} double ZAP_RANGE
- {static} double IMAGE_SCALE
- {static} String imageUrl
+ void upgrade(Empower)
+ void cast()
+ void applyEffect()
}


class component.protoss.Zealot {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
}

abstract class component.spell.BaseSpell {
+ void cast()
+ void applyEffect()
}

class control.GameEndControl {
}
class component.terran.Sniper {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
}

class component.zerg.BaseZergEnemy {
}
class component.zerg.Baneling {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ void applyEffect()
}


class component.spell.Fireball {
- {static} double BASE_DAMAGE
- {static} double BASE_CAST_TIME
- {static} double BASE_RADIUS
- {static} double IMAGE_SCALE
- {static} String imageUrl
+ void upgrade(Empower)
+ void cast()
+ void applyEffect()
}


interface component.spell.Upgradable {
~ void upgrade(Empower)
}

class control.MainControl {
- {static} MainControl instance
- {static} MainRender mainRender
- {static} MediaPlayer mediaPlayer
+ {static} MainControl getInstance()
+ void load(Stage)
- {static} void playBackgroundMusic()
+ {static} void stopBackgroundMusic()
}


class graphic.GameEndRender {
- {static} int score
+ {static} GameEndRender instance
+ {static} GameEndRender getInstance()
- void textInstallize()
+ {static} int getScore()
+ {static} void setScore(int)
}


class setting.Config {
+ {static} Screen screen
+ {static} double width
+ {static} double height
+ {static} double timeStep
}

class control.KeyInputControl {
- {static} KeyInputControl instance
- boolean[] arrowKey
- boolean[] cameraRotateState
- {static} boolean[] spellKeyboardLayoutState
- {static} KeyCode currentKeyToggle
+ {static} KeyInputControl getInstance()
+ void handle(KeyEvent)
- void rotateCameraHandler(KeyEvent)
- void spellKeyboardLayLoutHandler(KeyEvent)
- void updateWalkDirection()
+ {static} KeyCode getCurrentKeyToggle()
+ void setCurrentKeyToggle(KeyCode)
}


interface component.spell.Empower {
}
class component.zerg.Mutalisk {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
+ void applyEffect()
}


class component.protoss.Archons {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
}

class component.zerg.Zergling {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
}

class component.terran.Thor {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
}

class util.Vector2D {
- {static} Random random
+ {static} Vector2D ZERO
+ {static} Vector2D UP
+ {static} Vector2D DOWN
+ {static} Vector2D RIGHT
+ {static} Vector2D LEFT
+ {static} Vector2D MID_SCREEN
- double x
- double y
+ Vector2D add(Vector2D)
+ Vector2D add(double,double)
+ Vector2D subtract(Vector2D)
+ Vector2D subtract(double,double)
+ Vector2D multiply(double)
+ Vector2D reverse()
+ Vector2D rotateBy90(boolean)
+ double getSize()
+ Vector2D getNormalize()
+ Vector2D getVectorWithSize(double)
+ double getX()
+ void setX(double)
+ double getY()
+ void setY(double)
+ String toString()
}


class component.terran.BaseTerranEnemy {
}
class component.Player {
+ {static} String imageUrl
+ {static} double BASE_MAX_HEALTH
+ {static} double BASE_SPEED
+ {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_DAMAGE
}

class component.Base {
- String name
- Image image
- ImageView imageView
- Vector2D position
- double speed
- Vector2D direction
- Vector2D cameraMovementVector
- Group renderGroup
- Circle redDot
- double imageScale
- Races races
- boolean isDestroyed
+ void updateSprite()
+ void step(double)
+ void selfDelete()
+ String getName()
+ void setName(String)
+ Vector2D getPosition()
+ void setPosition(Vector2D)
+ Image getImage()
+ void setImage(String)
+ ImageView getImageView()
+ Vector2D getDirection()
+ void setDirection(Vector2D)
+ Vector2D getCameraMovementVector()
+ void setCameraMovementVector(Vector2D)
+ double getSpeed()
+ void setSpeed(double)
+ Group getRenderGroup()
+ void setRenderGroup(Group)
+ double getImageScale()
+ void setImageScale(double)
+ Races getRaces()
+ void setRaces(Races)
+ boolean isDestroyed()
+ void setDestroyed(boolean)
}


class component.spell.Tornado {
- {static} double BASE_DAMAGE
- {static} double BASE_CAST_TIME
- {static} double BASE_RADIUS
- {static} double BASE_PULL_FORCE
- {static} double IMAGE_SCALE
- {static} double BASE_SPELL_TIME
- {static} String imageUrl
+ void upgrade(Empower)
+ void cast()
+ void applyEffect()
- void selfDestroy()
}


class control.MouseInputControl {
- {static} HashMap<KeyCode,Spell> spellMapping
- {static} MouseInputControl instance
+ {static} MouseInputControl getInstance()
+ void handle(MouseEvent)
}


class component.terran.Medic {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double BASE_HEAL
- {static} double BASE_HEAL_RANGE
- {static} double IMAGE_SCALE
+ void applyEffect()
}


enum component.Races {
+  TERRAN
+  ZERG
+  PROTOSS
+  ALL
}

class component.terran.Solider {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
}

class component.protoss.Disruptor {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
- {static} double BASE_AURA_RANGE
- {static} double BASE_SLOW
+ void applyEffect()
}


class component.protoss.Tempest {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double BASE_SHIELD_COUNT
- double life
+ void applyEffect()
+ double getLife()
+ void setLife(double)
}


class component.Crystal {
- {static} String name
- {static} String imageUrl
- {static} Vector2D position
- {static} double maxHealth
- {static} double IMAGE_SCALE
}

class util.Goto {
- {static} Stage stage
- {static} Goto instance
+ {static} Goto getInstance()
+ void gotoGame()
+ void gotoMain()
- void stopAllMusic()
+ void setStage(Stage)
}


class component.BaseUnit {
- double maxHealth
- double health
- Rectangle healthBar
- double maxAttackRange
- double minAttackRange
- double damage
- double attackFrequency
- boolean attackFlag
- BaseUnit target
- Thread attackThread
- Image invisibleImage
- ImageView invisibleImageView
- Group invisibleRenderGroup
+ double getMaxHealth()
+ void setMaxHealth(double)
+ double getHealth()
+ void setHealth(double)
+ boolean isDestroyed()
+ double getMaxAttackRange()
+ void setMaxAttackRange(double)
+ double getMinAttackRange()
+ void setMinAttackRange(double)
+ double getDamage()
+ void setDamage(double)
+ double getAttackFrequency()
+ void setAttackFrequency(double)
+ BaseUnit getTarget()
+ void setTarget(BaseUnit)
+ void updateSprite()
+ void step(double)
- void constructAttackThread()
+ Group getInvisibleRenderGroup()
}


enum component.spell.Spell {
+  FIREBALL
+  LIGHTING_ORB
+  TORNADO
}

class component.protoss.BaseProtossEnemy {
- double shield
- double maxShield
+ void applyEffect()
+ double getMaxShield()
+ void setMaxShield(double)
+ double getShield()
+ void setShield(double)
+ void setHealth(double)
}


class control.GameControl {
- {static} GameControl instance
- {static} GameRender gameRender
- {static} MediaPlayer mediaPlayer
- Player player
- Crystal crystal
- HashMap<Races,ArrayList<Base>> entities
- boolean playing
- boolean lose
+ void load(Stage)
- void startGame()
+ {static} GameControl getInstance()
+ void useSpell(Vector2D,Spell)
+ void addEntity(Base)
+ void removeEntity(Base)
- {static} void playBackgroundMusic()
+ {static} void stopBackgroundMusic()
+ Crystal getCrystal()
+ void setCrystal(Crystal)
+ HashMap<Races,ArrayList<Base>> getEntities()
+ Player getPlayer()
+ void setPlayer(Player)
+ boolean isPlaying()
+ void setPlaying(boolean)
}


class component.zerg.Infestor {
- {static} double BASE_SPEED
- {static} double BASE_MAX_HEALTH
- {static} double BASE_DAMAGE
- {static} double BASE_MIN_ATTACK_RANGE
- {static} double BASE_MAX_ATTACK_RANGE
- {static} double BASE_ATTACK_FREQUENCY
- {static} double IMAGE_SCALE
- {static} double ATTACK_BUFF
- {static} double SPEED_BUFF
- {static} double SPEED_DEBUFF
+ void applyEffect()
}


class Main {
- {static} GameRender gameRender
- {static} Main instance
- {static} Stage stage
+ void start(Stage)
+ {static} void main(String[])
}




javafx.scene.layout.Pane <|-- graphic.GameRender
javafx.scene.layout.Pane <|-- graphic.MainRender
component.spell.Upgradable <|.. component.spell.LightningOrb
component.spell.BaseSpell <|-- component.spell.LightningOrb
component.protoss.BaseProtossEnemy <|-- component.protoss.Zealot
component.Base <|-- component.spell.BaseSpell
component.terran.BaseTerranEnemy <|-- component.terran.Sniper
component.BaseUnit <|-- component.zerg.BaseZergEnemy
component.zerg.BaseZergEnemy <|-- component.zerg.Baneling
component.spell.Upgradable <|.. component.spell.Fireball
component.spell.BaseSpell <|-- component.spell.Fireball
javafx.scene.layout.VBox <|-- graphic.GameEndRender
javafx.event.EventHandler <|.. control.KeyInputControl
component.zerg.BaseZergEnemy <|-- component.zerg.Mutalisk
component.protoss.BaseProtossEnemy <|-- component.protoss.Archons
component.zerg.BaseZergEnemy <|-- component.zerg.Zergling
component.terran.BaseTerranEnemy <|-- component.terran.Thor
component.BaseUnit <|-- component.terran.BaseTerranEnemy
component.BaseUnit <|-- component.Player
component.spell.Upgradable <|.. component.spell.Tornado
component.spell.BaseSpell <|-- component.spell.Tornado
javafx.event.EventHandler <|.. control.MouseInputControl
component.terran.BaseTerranEnemy <|-- component.terran.Medic
component.terran.BaseTerranEnemy <|-- component.terran.Solider
component.protoss.BaseProtossEnemy <|-- component.protoss.Disruptor
component.protoss.BaseProtossEnemy <|-- component.protoss.Tempest
component.BaseUnit <|-- component.Crystal
component.Base <|-- component.BaseUnit
component.BaseUnit <|-- component.protoss.BaseProtossEnemy
component.zerg.BaseZergEnemy <|-- component.zerg.Infestor
javafx.application.Application <|-- Main
@enduml